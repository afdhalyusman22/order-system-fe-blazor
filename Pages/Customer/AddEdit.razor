@page "/customer/addedit/{id:int?}"
@using Models.Customers
@inject ICustomerServices CustomerServices
@inject IJSRuntime JSRuntime
@inject NavigationManager navigationManager

<PageTitle>@Title</PageTitle>

<div class="row">
    <div class="card">
        <div class="card-header">
            @Title
        </div>
        <div class="card-body">
            <EditForm Model="@customers" OnValidSubmit="@HandleValidRequest" OnInvalidSubmit="HandleInvalidRequest">
                <DataAnnotationsValidator />
                <div class="form-group">
                    <label class="col-md-3">Firstname</label>
                    <InputText class="form-control col-md-8" @bind-Value="@customers.firstname"></InputText>
                    <ValidationMessage For="@(() => customers.firstname)" />
                </div>
                <div class="form-group">
                    <label class="col-md-3">Lastname</label>
                    <InputText class="form-control col-md-8" @bind-Value="@customers.lastname"></InputText>
                    <ValidationMessage For="@(() => customers.lastname)" />
                </div>
                <div class="form-group">
                    <label class="col-md-3">Email</label>
                    <InputText class="form-control col-md-8" @bind-Value="@customers.email"></InputText>
                    <ValidationMessage For="@(() => customers.email)" />
                </div>
                <div class="form-group">
                    <label class="col-md-3">Phone</label>
                    <InputText class="form-control col-md-8" @bind-Value="@customers.phone"></InputText>
                    <ValidationMessage For="@(() => customers.phone)" />
                </div>
                <div class="form-group">
                    <label class="col-md-3">Address</label>
                    <InputTextArea class="form-control col-md-8" @bind-Value="@customers.address"></InputTextArea>
                    <ValidationMessage For="@(() => customers.address)" />
                </div>
                <hr />
                <div class="form-group">
                    <button type="submit" class="btn btn-warning">Save</button>
                    <a @onclick="@goBack" class="btn btn-primary">Back</a>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    [Parameter] public int? id { get; set; }
    private CustomerDetail customers = new CustomerDetail();
    protected string Title = string.Empty;
    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine(id);
        if (id != null)
        {
            customers = await CustomerServices.GetItemDetails(Convert.ToInt32(id));
            Title = "Edit Customer";
        }
        else
            Title = "Add Customer";
        Console.WriteLine(customers);
    }

    protected void goBack()
    {
        navigationManager.NavigateTo("/customer");
    }

    protected async Task HandleValidRequest()
    {
        Console.WriteLine("submit id" + id);
        Console.WriteLine(customers);
        if (id != null)
        {
            Console.WriteLine("edit customer");
            var result = await CustomerServices.UpdateItem(customers, Convert.ToInt32(id));

            string message = result ? $"success update customer '{customers.firstname}'" : $"failed update customer '{customers.firstname}'";
            await JSRuntime.InvokeVoidAsync("alert", message); // Alert

            if (result)
                navigationManager.NavigateTo("/customer");
        }
        else
        {

            Console.WriteLine("add customer");
            var result = await CustomerServices.AddItem(customers);
            string message = result ? $"success add customer '{customers.firstname}'" : $"failed add customer '{customers.firstname}'";
            await JSRuntime.InvokeVoidAsync("alert", message); // Alert

            if (result)
                navigationManager.NavigateTo("/customer");
        }

    }

    protected async Task HandleInvalidRequest()
    {
        await JSRuntime.InvokeVoidAsync("alert", "Failed to submit form"); // Alert
    }
}