@page "/travel-package/addedit/{id:int?}"
@using Models.TravelPackages
@using Services
@inject ITravelPackageServices TravelPackageServices
@inject IJSRuntime JSRuntime
@inject NavigationManager navigationManager

<PageTitle>@Title</PageTitle>

<div class="row">
    <div class="card">
        <div class="card-header">
            @Title
        </div>
        <div class="card-body">
            <EditForm Model="@packages" OnValidSubmit="@HandleValidRequest" OnInvalidSubmit="HandleInvalidRequest">
                <DataAnnotationsValidator />
                <div class="form-group">
                    <label class="col-md-3">Name</label>
                    <InputText class="col-md-8 form-control" @bind-Value="@packages.name"></InputText>
                    <ValidationMessage For="@(() => packages.name)" />
                    </div>
                    <div class="form-group">
                        <label class="col-md-3">Description</label>
                    <InputText class="col-md-8 form-control" @bind-Value="@packages.description"></InputText>
                    <ValidationMessage For="@(() => packages.description)" />
                    </div>
                <hr />

                <div class="form-group">
                    <button type="submit" class="btn btn-warning">Save</button>
                    <a @onclick="@goBack" class="btn btn-primary">Back</a>
                </div>
            </EditForm>
        </div>

    </div>
</div>

@code {
    [Parameter]
    public int? id { get; set; }
    private TravelPackages packages = new TravelPackages();
    protected string Title = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine(id);
        if (id != null)
        {
            packages = await TravelPackageServices.GetItemDetails(Convert.ToInt32(id));
            Title = "Edit Travel Packages";
        }
        else
            Title = "Add Travel Packages";
    }

    protected void goBack()
    {
        navigationManager.NavigateTo("/travel-package");
    }

    protected async Task HandleValidRequest()
    {
        Console.WriteLine("submit id" + id);
        Console.WriteLine(packages);
        if (id != null)
        {
            Console.WriteLine("edit customer");
            var result = await TravelPackageServices.UpdateItem(packages, Convert.ToInt32(id));

            string message = result ? $"success update packages '{packages.name}'" : $"failed update packages '{packages.name}'";
            await JSRuntime.InvokeVoidAsync("alert", message); // Alert

            if (result)
                navigationManager.NavigateTo("/travel-package");
        }
        else
        {
            var result = await TravelPackageServices.AddItem(packages);
            string message = result ? $"success add packages '{packages.name}'" : $"failed add packages '{packages.name}'";
            await JSRuntime.InvokeVoidAsync("alert", message); // Alert

            if (result)
                navigationManager.NavigateTo("/travel-package");
        }

    }

    protected async Task HandleInvalidRequest()
    {
        await JSRuntime.InvokeVoidAsync("alert", "Failed to submit form"); // Alert
    }
    }
